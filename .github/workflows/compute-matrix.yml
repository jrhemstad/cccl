
name: Compute the matrix for a given matrix type from the specified matrix file

on:
  workflow_call:
    inputs:
      matrix_file: 
        type: string
        required: true
      matrix_type:
        description: "The desired matrix type. Currently, only 'pull-request' and 'nightly' are supported."
        type: string
        required: true
    outputs:
      FULL_MATRIX: 
        description: "The full matrix of build configurations for the given matrix type."
        value: ${{ jobs.compute-matrix.outputs.FULL_MATRIX }}
      CUDA_VERSIONS:
        description: "The unique CUDA versions in the full matrix."
        value: ${{ jobs.compute-matrix.outputs.CUDA_VERSIONS }}
      OLDEST_CUDA_VERSION:
        description: "The oldest CUDA version in the full matrix."
        value: ${{ jobs.compute-matrix.outputs.OLDEST_CUDA_VERSION }}
      NEWEST_CUDA_VERSION:
        description: "The newest CUDA version in the full matrix."
        value: ${{ jobs.compute-matrix.outputs.NEWEST_CUDA_VERSION }}
      COMPILERS:
        description: "The unique compilers in the full matrix."
        value: ${{ jobs.compute-matrix.outputs.COMPILERS }}
      PER_CUDA_COMPILER_MATRIX:
        description: "The matrix of build configurations for each CUDA version and compiler."
        value: ${{ jobs.compute-matrix.outputs.PER_CUDA_COMPILER_MATRIX }}

defaults:
  run:
    shell: bash

env:
  MATRIX_TYPE: ${{ inputs.matrix_type}}
  MATRIX_FILE: ${{ inputs.matrix_file }}

jobs:
  compute-matrix:
    name: ${{inputs.matrix_type}} 
    runs-on: ubuntu-latest
    outputs:
      FULL_MATRIX:  ${{ steps.compute-matrix.outputs.FULL_MATRIX }}
      CUDA_VERSIONS: ${{ steps.compute-matrix.outputs.CUDA_VERSIONS }}
      OLDEST_CUDA_VERSION: ${{ steps.compute-matrix.outputs.OLDEST_CUDA_VERSION }}
      NEWEST_CUDA_VERSION: ${{ steps.compute-matrix.outputs.NEWEST_CUDA_VERSION }}
      COMPILERS: ${{ steps.compute-matrix.outputs.COMPILERS }}
      PER_CUDA_COMPILER_MATRIX: ${{ steps.compute-matrix.outputs.PER_CUDA_COMPILER_MATRIX }}
    steps:
      - name: Validate matrix type
        run: |
          if [[ "$MATRIX_TYPE" != "pull-request" && "$MATRIX_TYPE" != "nightly" ]]; then
            echo "Invalid build type: $MATRIX_TYPE. Must be 'nightly' or 'pull-request'"
            exit 1
          fi
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Compute matrix
        id: compute-matrix
        run: |
          echo "Input matrix file:"
          cat "$MATRIX_FILE"
          FULL_MATRIX=$(yq -o=json ./ci/matrix.yaml | jq -c --arg matrix_type "$MATRIX_TYPE" '[ .[$matrix_type][] | . as $o | {std: .std[]} + del($o.std)]')
          echo "FULL_MATRIX=$FULL_MATRIX" | tee -a "$GITHUB_OUTPUT"
          CUDA_VERSIONS=$(echo $FULL_MATRIX | jq -c '[.[] | .cuda] | unique')
          OLDEST_CUDA_VERSION=$(echo $CUDA_VERSIONS | jq -r '.[0]')
          echo "OLDEST_CUDA_VERSION=$OLDEST_CUDA_VERSION" | tee -a "$GITHUB_OUTPUT"
          NEWEST_CUDA_VERSION=$(echo $CUDA_VERSIONS | jq -r '.[-1]')
          echo "NEWEST_CUDA_VERSION=$NEWEST_CUDA_VERSION" | tee -a "$GITHUB_OUTPUT"
          echo "CUDA_VERSIONS=$CUDA_VERSIONS" | tee -a "$GITHUB_OUTPUT"
          COMPILERS=$(echo $FULL_MATRIX | jq -c '[.[] | .compiler.name] | unique')
          echo "COMPILERS=$COMPILERS" | tee -a "$GITHUB_OUTPUT"
          PER_CUDA_COMPILER_MATRIX=$(echo $FULL_MATRIX | jq -c ' group_by(.cuda + .compiler.name) | map({(.[0].cuda + "-" + .[0].compiler.name): .}) | add')
          echo "PER_CUDA_COMPILER_MATRIX=$PER_CUDA_COMPILER_MATRIX" | tee -a "$GITHUB_OUTPUT"